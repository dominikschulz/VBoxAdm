#!/usr/bin/perl
use strict;
use warnings;

# We use "Defined-or operators" operators introduced with 5.9.0
use 5.9.0;

use lib '@LIBDIR@';

use Carp;
use Getopt::Long;
use Config::Std;
use Net::Domain;

use Log::Tree;
use VBoxAdm::SMTP::Proxy::MA '@VERSION@';

my $syntax = "syntax: $0 [--verbose] [--config=<FILE>]\n";

my ( $conffile_used, %config, );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
  @CFGDIR@/vboxadm/vboxadm.conf
);
GetOptions(
    'verbose|v+' => \$config{'verbose'},
    'dry|d!'     => \$config{'dry'},
    'no-fork!'   => \$config{'no-fork'},

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or die $syntax;

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

package VBoxAdm::SMTP::Mailarchive;

# Determine options
my $dbhost = $config{'mailarchive'}{'dbhost'} || $config{'default'}{'dbhost'} || 'localhost';
my $dbuser = $config{'mailarchive'}{'dbuser'} || $config{'default'}{'dbuser'} || 'vboxadm';
my $dbpass = $config{'mailarchive'}{'dbpass'} || $config{'default'}{'dbpass'} || 'vboxadm';
my $dbport = $config{'mailarchive'}{'dbport'} || $config{'default'}{'dbport'} || 3306;
my $dbdb   = $config{'mailarchive'}{'dbdb'}   || $config{'default'}{'dbdb'}   || 'vboxadm';
my $listen = $config{'mailarchive'}{'listen'} || 'localhost:10029';
my $pidfile           = $config{'mailarchive'}{'pidfile'}           || '/var/run/vboxadm/ma.pid';
my $user              = $config{'mailarchive'}{'user'}              || 'vboxadm';
my $group             = $config{'mailarchive'}{'group'}             || 'vboxadm';
my $childtimeout      = $config{'mailarchive'}{'childtimeout'}      || 60;
my $min_servers       = $config{'mailarchive'}{'min_servers'}       || 5;
my $min_spare_servers = $config{'mailarchive'}{'min_spare_servers'} || 5;
my $max_servers       = $config{'mailarchive'}{'max_servers'}       || 80;
my $max_spare_servers = $config{'mailarchive'}{'max_spare_servers'} || 10;
my $max_requests      = $config{'mailarchive'}{'max_requests'}      || 500;
my $nsloglevel = $config{'mailarchive'}{'nsloglevel'} // 2;
my $logsock = $config{'mailarchive'}{'logsock'} || 'unix';
my $background = $config{'no-fork'} ? 0 : 1;
my $logfile                          = $config{'mailarchive'}{'logfile'}                          || '/var/log/vboxadm/ma.log';
my $tempdir                          = $config{'mailarchive'}{'tempdir'}                          || '/tmp';
my $ignore_spam                      = $config{'mailarchive'}{'ignore_spam'}                      || 1;
my $ignore_sender_roleacc            = $config{'mailarchive'}{'ignore_sender_roleacc'}            || 1;
my $ignore_sender_eq_recipient       = $config{'mailarchive'}{'ignore_sender_eq_recipient'}       || 1;
my $ignore_senderdom_eq_recipientdom = $config{'mailarchive'}{'ignore_senderdom_eq_recipientdom'} || 1;

my $Logger = Log::Tree::->new( { 'facility' => 'vboxadm-ma', 'filename' => $logfile, } );

# Important: Make sure the logfile exists (by logging to it) and is owned by the user
# our child will be running as. Otherwise you may experience a situation
# where childs are spawned very fast and immedeately dying.
$Logger->log( message => "Mailarchive starting ...", level => 'debug', );
system("chown -R $user:$group $logfile");

# Database Hosts
my @dbhosts = ();
if ( $config{'mailarchive'}{'dbhost'} ) {
    if ( ref( $config{'mailarchive'}{'dbhost'} ) eq 'ARRAY' ) {
        push( @dbhosts, @{ $config{'mailarchive'}{'dbhost'} } );
    }
    else {
        push( @dbhosts, $config{'mailarchive'}{'dbhost'} );
    }
}
elsif ( $config{'default'}{'dbhost'} ) {
    if ( ref( $config{'default'}{'dbhost'} ) eq 'ARRAY' ) {
        push( @dbhosts, @{ $config{'default'}{'dbhost'} } );
    }
    else {
        push( @dbhosts, $config{'default'}{'dbhost'} );
    }
}
else {
    push( @dbhosts, 'localhost' );
}
my @allow = ();
if ( $config{'mailarchive'}{'allow'} ) {
    if ( ref( $config{'mailarchive'}{'allow'} ) eq 'ARRAY' ) {
        push( @dbhosts, @{ $config{'mailarchive'}{'allow'} } );
    }
    else {
        push( @dbhosts, $config{'mailarchive'}{'allow'} );
    }
}
else {
    push( @allow, '127.0.0.1' );
}

# Parse listen and connect options
my ( $srcaddr, $srcport ) = split /:/, $listen;

my $vboxadm_args = {
    dbh          => undef,
    childtimeout => $childtimeout,
    dry          => $config{'dry'},
    tempdir      => $tempdir,
    hostname     => Net::Domain::hostfqdn() || 'localhost',

    dbhosts => \@dbhosts,
    dbport  => $dbport,
    dbuser  => $dbuser,
    dbpass  => $dbpass,
    dbdb    => $dbdb,

    ignore_spam                      => $ignore_spam,
    ignore_sender_roleacc            => $ignore_sender_roleacc,
    ignore_sender_eq_recipient       => $ignore_sender_eq_recipient,
    ignore_senderdom_eq_recipientdom => $ignore_senderdom_eq_recipientdom,
};
my $server_args = {

    # Binding
    host  => $srcaddr,
    port  => $srcport,
    proto => 'tcp',

    # ACL
    allow => \@allow,

    # Logging
    log_file        => 'Sys::Syslog',
    log_level       => $nsloglevel,
    syslog_logsock  => $logsock,
    syslog_ident    => 'vboxadm-ma',
    syslog_facility => 'mail',

    # Misc
    background => $background,
    pid_file   => $pidfile,
    user       => $user,
    group      => $group,

    # PreFork
    min_servers       => $min_servers,
    min_spare_servers => $min_spare_servers,
    max_servers       => $max_servers,
    max_spare_servers => $max_spare_servers,
    max_requests      => $max_requests,

    'vbox'   => $vboxadm_args,
    'logger' => $Logger,
};

my $proxy = VBoxAdm::SMTP::Proxy::MA::->new($server_args);

# Test DB connection before starting server
if ( $proxy->db_connect() ) {
    $proxy->{server}->{vbox}->{dbh}->disconnect() if $proxy->{server}->{vbox}->{dbh};
}
else {
    my $msg = "Could not connect to database!";
    $Logger->log( message => $msg, level => 'error', );
    croak($msg);
}

# redirect STDOUT and STDERR to logfile
# every output should go to the syslog but in case
# something behaves badly, e.g. a module used,
# we redirect the remaining output to a logfile
# for further investigation.
if ($background) {
    close(STDOUT);
    close(STDERR);
    close(STDIN);
    open STDIN,  '<', '/dev/null' or croak("Could not redirect STDIN");
    open STDOUT, '>', $logfile    or croak("Could not redirect STDOUT");
    open STDERR, '>&STDOUT' or croak("Could not dup STDERR");
}

$proxy->run();

exit 1;

###########################################################################
# Subs
###########################################################################
# None yet.

__END__

=head1 NAME

mailarchive - Archival and meta-data indexing of incoming and outgoing mail.

=head1 VERSION

This documentation refers to VBoxAdm mailarchive version @VERSION@
built on @BUILDDATE@.

=head1 DESCRIPTION

What is the purpose of the mailarchive?
- revision safe archival of all incoming and outgoing mails
- search and retrieval of archived mails
- after mail is retrieved it is automatically signed
- these signatures are re-signed/re-newed every n days/weeks/months
- it aims to be compliant with the (german) law requiring business entities to
store exact copy of business mail
- SQL Schema:
-- one table for mails, per month/year: archive_body_YYYY_MM (id, blob, checksum)
-- one table for signature: archive_sign_YYYY_MM (id, blob), i.e. signatures are not calculated "live", rather by a cron
-- one table for meta-data and searching: archive_metadata (id, tbl, tbl_id, from, to, ...)
-- maybe a full-text index
- see http://de.wikipedia.org/wiki/E-Mail-Archivierung
- see http://search.cpan.org/~frajulac/GnuPG-0.09/GnuPG.pm
- this really should be an SMTP-Server implementation with VBoxAdm::SMTP::Server and Net::Server::PreFork
  for these reasons:
-- postfix will bounce the mail if the transport ever fails (maybe due to a bug or misconfiguration) but
   will try at least for 5 days to deliver to an smtp server
-- archival should be on another, secured, host

=head1 CONFIGURATION AND ENVIRONMENT

The configuration file should be place either in /etc/vboxadm.conf or
in /etc/vboxadm/vboxadm.conf. This is a common configuration file
for the whole suite of VBoxAdm applications. Each part of this suite
has its own section in the config file and all use the values
from the default section when appropriate.

=head2 default
The default section should contain at least the database configuration.

dbuser - The user used to connect to the MySQL database.
dbpass - This users password.
dbdb - The db used by this application.
dbhost - The MySQL database host, usually localhost.

=head2 mailarchive

TODO

=head1 DEPENDENCIES

Config::Std, Net::Domain, VBoxAdm::SMTP::Mailarchive, DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

