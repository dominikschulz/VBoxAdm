package VBoxAdm::Controller::API;

use base 'CGI::Application';

use strict;
use warnings;

use CGI::Carp qw(fatalsToBrowser);

# Needed for database connection
use CGI::Application::Plugin::DBH (qw/dbh_config dbh/);

use Carp;
use Config::Std;
use Data::Dumper;
use Encode;
use Try::Tiny;

use VWebAdm::API '@VERSION@';
use VBoxAdm::L10N '@VERSION@';
use VWebAdm::Utils '@VERSION@';
use Log::Tree;

use VBoxAdm::Model::Alias '@VERSION@';
use VBoxAdm::Model::AWL '@VERSION@';
use VBoxAdm::Model::Domain '@VERSION@';
use VBoxAdm::Model::DomainAlias '@VERSION@';
use VBoxAdm::Model::Mailbox '@VERSION@';
use VWebAdm::Model::MessageQueue '@VERSION@';
use VBoxAdm::Model::RFCNotify '@VERSION@';
use VBoxAdm::Model::RoleAccount '@VERSION@';
use VBoxAdm::Model::User '@VERSION@';
use VBoxAdm::Model::VacationBlacklist '@VERSION@';
use VBoxAdm::Model::VacationNotify '@VERSION@';

our $VERSION = '@VERSION@';

############################################
# Usage      : Invoked by CGIApp
# Purpose    : Setup the Application
# Returns    : Nothing
# Parameters : None
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
# setup is run right after cgiapp_init
sub setup {
    my $self = shift;

    my $Logger = Log::Tree::->new( { 'facility' => 'VBoxAdm/API', } );
    $self->{'logger'} = $Logger;

    # define the default run mode
    $self->start_mode('api');

    # define the mappings between the rm parameter and the actual sub
    $self->run_modes(
        'api'  => 'show_api',
    );

    #
    # Configuration
    #
    # Valid config file locations to try
    my @conffile_locations = qw(
      vboxadm.conf
      conf/vboxadm.conf
      /etc/vboxadm/vboxadm.conf
      @CFGDIR@/vboxadm/vboxadm.conf
    );

    # if the application if run as a FastCGI app, the server might
    # provide an additional configuration location. if the points to file
    # add it to the list of possible locations
    if ( $ENV{CGIAPP_CONFIG_FILE} && -f $ENV{CGIAPP_CONFIG_FILE} ) {
        unshift( @conffile_locations, $ENV{CGIAPP_CONFIG_FILE} );
    }

    my ( %config, $conffile_used );

    # Try all config file locations
    foreach my $loc (@conffile_locations) {
        if ( -r $loc ) {
            $conffile_used = $loc;
            read_config $loc => %config;
            last;
        }
    }
    if ( !$conffile_used ) {
        $self->{'logger'}
          ->log( message => "setup - Warning: No readable config file found in search path! (" . join( ':', @conffile_locations ) . ")", level => 'warning', );
    }
    $config{'quiet'} = 1;
    $self->{config} = \%config;
    
    #
    # API helper
    #
    my $API = VWebAdm::API::->new({
        'logger'    => $Logger,
        'key'       => $self->{'config'}->{'api'}->{'key'},
    });
    $self->{'api'} = $API;

    #
    # Database
    #
    my $user = $config{'default'}{'dbuser'} || 'root';
    my $pass = $config{'default'}{'dbpass'} || 'root';
    my $db   = $config{'default'}{'dbdb'}   || 'vboxadm';
    my $port = $config{'default'}{'dbport'} || 3306;
    my $host = $config{'default'}{'dbhost'} || 'localhost';
    my $dsn  = "DBI:mysql:database=$db;user=$user;password=$pass;host=$host;port=$port";
    $self->{base_url}     = $config{'cgi'}{'base_url'}     || '/cgi-bin/vboxadm.pl';
    $self->{media_prefix} = $config{'cgi'}{'media_prefix'} || '';

    # Connect to DBI database, same args as DBI->connect();
    # uses connect_cached for persistent connections
    # this should have no effect for CGI and speed up FastCGI
    $self->dbh_config(
        sub {
            DBI->connect_cached(
                $dsn, undef, undef,
                {
                    PrintError => 0,
                    RaiseError => 0,
                }
            );
        }
    );
    if ( !$self->dbh ) {
        $self->{'logger'}->log( message => "setup - Failed to establish DB connection with DSN $dsn and error message: " . DBI->errstr, level => 'warning', );
        die("Could not connect to DB.");
    }

    # Prepare connection for UTF-8
    # Scripts, Database, Sourcecode, Userdata ... everything should be in UTF-8
    # the only point were we could deal with non-UTF-8 is when we output data to
    # non-utf-8 capable browsers (are there any?)
    $self->dbh->do("SET NAMES utf8")
      or $self->{'logger'}->log( message => "setup - Failed to set DB connection to UTF-8!", level => 'warning', );

    #
    # L10N
    #
    # the user handle, will try to determine the appropriate language ... look at the docs of Locale::Maketext
    $self->{lh} = VBoxAdm::L10N::->get_handle();

    # this handle is used for logging. logged messages should always be in english
    $self->{lh_en} = VBoxAdm::L10N::->get_handle('en');

    # to make perlcritic happy
    return 1;
}

sub teardown {
    my $self = shift;

    # Disconnect when done
    $self->dbh->disconnect();

    # to make perlcritic happy
    return 1;
}

#
# CGI::Application Hooks
#
# cgiapp_init is run right before setup
sub cgiapp_init {
    my $self = shift;

    # Everything should be in UTF-8!
    $self->query->charset('UTF-8');

    # to make perlcritic happy
    return 1;
}

sub show_api {
    my $self = shift;

    # Get CGI Query object
    my $q = $self->query();

    my $api_version = $q->param('v');

    if ( $api_version == 1 ) {
        return $self->handle_v1();
    }
    else {
        $self->header_add( -status => 400 );
        return "Unknown API Version.\n";
    }
}

sub handle_v1 {
    my $self = shift;

    # Get CGI Query object
    my $q = $self->query();

    my $payload = $q->param('p');

    if ( !$payload ) {
        $self->header_add( -status => 491 );
        return "Missing parameters.\n";
    }

    my $hash_ref = $self->{'api'}->decrypt( $payload );

    if ( !$hash_ref ) {
        $self->header_add( -status => 492 );
        return "Unable to decode. Check you API key.\n";
    }

    if ( ref($hash_ref) ne 'HASH' ) {
        $self->header_add( -status => 493 );
        return "Illegal request.\n";
    }
    
    my $answer_ref = {};
    if($hash_ref->{'auth'}->{'ro'}) {
        $answer_ref = $self->_handle_v1_ro($hash_ref);
    } elsif($hash_ref->{'auth'}->{'rw'}) {
        $answer_ref = $self->_handle_v1_rw($hash_ref);
    }
    
    return $self->{'api'}->encrypt($answer_ref);
}

sub _handle_v1_ro {
    my $self = shift;
    my $hash_ref = shift;
    
    my $answer_ref = {};
    
    $answer_ref->{'auth'} = 'ok';
    
    if($hash_ref->{'mailbox'}->{'read'} && scalar(keys %{$hash_ref->{'mailbox'}->{'read'}})) {
        my @fields = qw(mailboxes.id domains.id sa_active sa_kill_score is_on_vacation vacation_subj vacation_msg vacation_start vacation_end max_msg_size);
        my $sql = 'SELECT '.join(',',@fields).' FROM mailboxes LEFT JOIN domains ON mailboxes.domain_id = domains.id WHERE ';
        $sql .= 'mailboxes.local_part = ? AND domains.name = ? AND mailboxes.is_active AND domains.is_active LIMIT 1';
        #$self->{'logger'}->log( message => 'SQL: '.$sql, level => 'debug', );
        my $sth = $self->dbh()->prepare($sql);
        foreach my $username (keys %{$hash_ref->{'mailbox'}->{'read'}}) {
            my ($local_part,$domain) = split /@/, $username;
            #$self->{'logger'}->log( message => 'Args: '.join(' - ',($local_part,$domain)), level => 'debug', );
            $sth->execute($local_part,$domain);
            my @row = $sth->fetchrow_array();
            #$self->{'logger'}->log( message => 'Mailbox-Result: '.join(' - ',@row), level => 'debug', );
            my %h;
            @h{@fields} = @row;
            foreach my $field ( keys %h ) {
                $h{$field} = Encode::decode( 'UTF-8', $h{$field} ) unless Encode::is_utf8( $h{$field} );
            }
            #$self->{'logger'}->log( message => 'Mailbox-Result: '.join(' - ',map { $_.' => '.$h{$_} } keys %h), level => 'debug', );
            $h{'id'} = $h{'mailboxes.id'};
            $h{'domain_id'} = $h{'domains.id'};
            $answer_ref->{'mailbox'}->{'read'}->{$username}->{'rv'} = \%h;
        }
        $answer_ref->{'action'} = 'ok';
    }
    if($hash_ref->{'domain'}->{'read'} && scalar(keys %{$hash_ref->{'domain'}->{'read'}})) {
        my @fields = qw(id name is_active);
        my $sql = 'SELECT '.join(',',@fields).' FROM domains WHERE id = ? LIMIT 1';
        my $sth = $self->dbh()->prepare($sql);
        foreach my $domain_id (keys %{$hash_ref->{'domain'}->{'read'}}) {
            $sth->execute($domain_id);
            my @row = $sth->fetchrow_array();
            #$self->{'logger'}->log( message => 'Domain-Result: '.join(' - ',@row), level => 'debug', );
            my %h;
            @h{@fields} = @row;
            foreach my $field ( keys %h ) {
                $h{$field} = Encode::decode( 'UTF-8', $h{$field} ) unless Encode::is_utf8( $h{$field} );
            }
            $answer_ref->{'domain'}->{'read'}->{$domain_id}->{'rv'} = \%h;
        }
        $answer_ref->{'action'} = 'ok';
    }
    
    return $answer_ref;
}

sub _handle_v1_rw {
    my $self = shift;
    my $hash_ref = shift;
    
    # set defaults here
    my $answer_ref = {
        'action'    => 'none',
        'auth'      => 'error',
        'error'     => {
            'num'   => 0,
            'str'   => '',
        },
    };

    my $Messages = VWebAdm::Model::MessageQueue::->new(
        {
            'lh'    => $self->{'lh'},
            'lh_en' => $self->{'lh_en'},
            'logger' => $self->{'logger'},
        }
    );
    $self->{'Messages'} = $Messages;
    my $User;
    if ( $hash_ref->{'user'}->{'username'} && $hash_ref->{'user'}->{'password'} ) {
        my $success = try {
            $User = VBoxAdm::Model::User::->new(
                {
                    'dbh'       => $self->dbh,
                    'msgq'      => $Messages,
                    'logger'    => $self->{'logger'},
                    'config'    => $self->{'config'},
                    'username'  => $hash_ref->{'user'}->{'username'},
                }
            );
            1;
        }
        catch {
            $self->{'logger'}->log( message => 'Error while instantiating user: '.$_, level => 'error', );
        };
        if(!$success) {
            $self->header_add( -status => 494 );
            $answer_ref->{'error'}->{'num'} = 494;
            $answer_ref->{'error'}->{'str'} = 'Failed to instantiate user. Please check your configuration.';
            return $answer_ref;
        }
    }
    if ( $User && $User->login($hash_ref->{'user'}->{'password'})) {
        $self->{'logger'}->log( message => 'User '.$User->id().'/'.$User->local_part().'@'.$User->domain().' logged in via API', level => 'debug', );
        $answer_ref->{'auth'} = 'ok';
    } else {
        my $msg = 'Login failed for '.$hash_ref->{'user'}->{'username'}.':'.$hash_ref->{'user'}->{'password'};
        $self->{'logger'}->log( message => $msg, level => 'error', );
        $self->header_add( -status => 495 );
        $answer_ref->{'error'}->{'num'} = 495;
        $answer_ref->{'error'}->{'str'} = $msg;
        return $answer_ref;
    }
    $self->{'User'} = $User;
    $self->{'logger'}->suffix('[User: '.$User->get_name().']');
    
    my $arg_ref = {
        'dbh'          => $self->dbh,
        'user'         => $User,
        'msgq'         => $Messages,
        'logger'       => $self->{'logger'},
        'config'       => $self->{'config'},
    };
    my $c = {};
    my $success = try {
        $c->{alias}             = VBoxAdm::Model::Alias::->new($arg_ref);
        $c->{awl}               = VBoxAdm::Model::AWL::->new($arg_ref);
        $c->{domain}            = VBoxAdm::Model::Domain::->new($arg_ref);
        $c->{domainalias}       = VBoxAdm::Model::DomainAlias::->new($arg_ref);
        $c->{mailbox}           = VBoxAdm::Model::Mailbox::->new($arg_ref);
        $c->{rfcnotify}         = VBoxAdm::Model::RFCNotify::->new($arg_ref);
        $c->{vacationblacklist} = VBoxAdm::Model::VacationBlacklist::->new($arg_ref);
        $answer_ref->{'init'} = 'ok';
        1;
    } catch {
        $self->{'logger'}->log( message => 'Error while instantiating model classes: '.$_, level => 'error', );
    };
    if(!$success) {
        $self->header_add( -status => 496 );
        $answer_ref->{'error'}->{'num'} = 496;
        $answer_ref->{'error'}->{'str'} = 'Failed to instantiate model classes. Please check your configuration.';
        return $answer_ref;
    }

    # process requests in hash_ref
    # return response as crypted, json encoded string
    my $items_processed = 0;
    MODULE: foreach my $module ( keys %{$hash_ref} ) {
        #$self->{'logger'}->log( message => 'Module: '.$module.'/ref:'.ref( $hash_ref->{$module} ), level => 'debug', );
        $module = lc($module);
        next if ref( $hash_ref->{$module} ) ne 'HASH';
        next if $module eq 'user';
        next unless $c->{$module};
        ACTION: foreach my $action ( keys %{ $hash_ref->{$module} } ) {
            #$self->{'logger'}->log( message => 'Module: '.$module.' - Action: '.$action.'/ref:'.ref( $hash_ref->{$module}->{$action} ), level => 'debug', );

            $action = lc($action);
            if ( $action eq 'list' ) {
                my $param_ref;
                if ( ref( $hash_ref->{$module}->{$action} ) eq 'HASH' ) {
                    $param_ref = $hash_ref->{$module}->{$action};
                }
                else {
                    $param_ref = {};
                }
                $answer_ref->{$module}{$action}{'rv'}   = [ $c->{$module}->list($param_ref) ];
                $answer_ref->{$module}{$action}{'msgs'} = [ $Messages->get() ];
            }
            else {
                next if ref( $hash_ref->{$module}->{$action}) ne 'HASH';
                ITEM: foreach my $item ( keys %{ $hash_ref->{$module}->{$action} } ) {
                    #$self->{'logger'}->log( message => 'Module: '.$module.' - Action: '.$action.' - Item: '.$item.' - ref:'.ref( $hash_ref->{$module}->{$action}->{$item} ), level => 'debug', );
                    my $param_ref = $hash_ref->{$module}->{$action}->{$item};

                    # item may either by numeric -> use directly
                    # or non-numeric -> look up id and use it instead
                    my $id;
                    if ( $item =~ m/^\d+$/ ) {
                        $id = $item;
                    }
                    else {
                        $id = $c->{$module}->get_id($item);
                        if ( !$id ) {
                            $answer_ref->{$module}{$action}{$item}{'rv'}   = 0;
                            $answer_ref->{$module}{$action}{$item}{'msgs'} = 'Item not found!';
                            $self->{'logger'}->log( message => 'Id not found for '.$module.'/'.$action.'/'.$item, level => 'warning', );
                            next ITEM;
                        }
                    }
                    
                    if ( $action eq 'read' ) {
                        $answer_ref->{$module}{$action}{$item}{'rv'}   = $c->{$module}->read($id);
                        $answer_ref->{$module}{$action}{$item}{'msgs'} = [ $Messages->get() ];
                        $answer_ref->{'action'} = 'ok';
                        $items_processed++;
                    }
                    elsif ( $action eq 'delete' ) {
                        $answer_ref->{$module}{$action}{$item}{'rv'}   = $c->{$module}->delete($id);
                        $answer_ref->{$module}{$action}{$item}{'msgs'} = [ $Messages->get() ];
                        $answer_ref->{'action'} = 'ok';
                        $items_processed++;
                    }
                    elsif ( $action eq 'update' ) {
                        #$self->{'logger'}->log( message => 'Calling update for '.$module.'/'.$action.'/'.$item.' w/ id: '.$id.' and params: '.Dumper($param_ref), level => 'debug', );
                        $answer_ref->{$module}{$action}{$item}{'rv'} = $c->{$module}->update( $id, $param_ref );
                        $answer_ref->{$module}{$action}{$item}{'msgs'} = [ $Messages->get() ];
                        $answer_ref->{'action'} = 'ok';
                        $items_processed++;
                    }
                    elsif ( $action eq 'create' ) {
                        $answer_ref->{$module}{$action}{$item}{'rv'} = $c->{$module}->create( $item, $param_ref );
                        $answer_ref->{$module}{$action}{$item}{'msgs'} = [ $Messages->get() ];
                        $answer_ref->{'action'} = 'ok';
                        $items_processed++;
                    }
                }
            }
        }
    }
    
    if($items_processed < 1) {
        $answer_ref->{'error'}->{'num'} = 497;
        $answer_ref->{'error'}->{'str'} = 'No valid jobs found.';
    }
    
    return $answer_ref;
}

1;
__END__


=head1 NAME

VBoxAdm::Controller::API - HTTP-API for VBoxAdm

=cut
